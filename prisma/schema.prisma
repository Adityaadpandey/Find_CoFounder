// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  username     String        @unique
  email        String        @unique
  name         String
  githubId     String?       @unique
  linkedinId   String?       @unique
  role         Role
  phone        String?
  profile      Profile? // Remove fields/references here as they're defined in Profile
  createdIdeas Idea[] // Relation name is defined in the Idea model
  applications Application[] // Relation name is defined in the Application model

  @@map("users") // Good practice to explicitly define table names
}

model Profile {
  id         String   @id @default(cuid())
  bio        String
  skills     String[]
  experience String
  userId     String   @unique // Foreign key to User
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Idea {
  id           String        @id @default(cuid())
  title        String
  description  String
  equity       Float
  skills       String[]
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]

  @@index([userId])
  @@map("ideas")
}

model Application {
  id     String            @id @default(cuid())
  ideaId String // Foreign key to Idea
  userId String // Foreign key to User
  status ApplicationStatus @default(PENDING)
  user   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea   Idea              @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  @@unique([userId, ideaId]) // Prevent duplicate applications
  @@index([userId])
  @@index([ideaId])
  @@map("applications")
}

enum Role {
  FOUNDER
  DEVELOPER
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
